#!/bin/sh

set -e


exec_rake() {
  su -c "cd /usr/share/gitlab; ruby1.9.1 \"\$(which bundle)\" exec rake \
    $* RAILS_ENV=production" -s /bin/sh gitlab
}

# FIXME: add stuff for check if gitlab already installed not from package
add_users() {
  echo "Adding required users..."

  # create user for access repositories
  adduser --quiet --system --group --disabled-password \
    --home /var/lib/git --shell /bin/sh --gecos 'git version control' git

  # create user for gitlab application
  adduser --quiet --system --group --disabled-login \
    --home /var/lib/gitlab --gecos 'gitlab system' gitlab
  adduser --quiet gitlab git >/dev/null
}


# FIXME: move keys to /etc
gen_ssh_key() {
  echo "Generating ssh key for access gitolite..."

  # backup old key if present
  BK_EXT="$(date +%Y%m%d-%H%M%S).$$"
  KEYFILE="/var/lib/gitlab/.ssh/id_rsa"
  [ ! -e "$KEYFILE" ] || mv -f "$KEYFILE" "$KEYFILE.$BK_EXT"
  [ ! -e "$KEYFILE.pub" ] || mv -f "$KEYFILE.pub" "$KEYFILE.$BK_EXT.pub"

  # generate gitlab ssh key
  su -c 'ssh-keygen -q -N "" -t rsa -f /var/lib/gitlab/.ssh/id_rsa' \
    -s /bin/sh gitlab
}


setup_gitolite() {
  echo "Setting gitolite..."

  # setup gitolite
  cp /var/lib/gitlab/.ssh/id_rsa.pub /var/lib/git/gitlab.pub
  chmod 0644 /var/lib/git/gitlab.pub
  su -c 'gl-setup -q /var/lib/git/gitlab.pub >/dev/null' git
  rm -f /var/lib/git/gitlab.pub
  
  # fix permissions
  sed -i \
    -e 's/^\$REPO_UMASK = 0077;/$REPO_UMASK = 0007;/' \
    -e 's/^\$GL_GITCONFIG_KEYS = "";/$GL_GITCONFIG_KEYS = ".*";/' \
    /var/lib/git/.gitolite.rc
  chmod u=rwX,g=rwX,o= -R /var/lib/git/repositories
  find /car/lib/git/repositories -type d -exec chmod ug+s '{}' ';'

  # add gitlab post-receive hook
  hook="/var/lib/git/.gitolite/hooks/common/post-receive"
  hooksrc="/usr/share/gitlab/lib/hooks/post-receive"
  if [ -e "$hook" ]; then
    if [ "$(readlink -qs "$hook")" != "$hooksrc" ]; then
      echo "Replace and backup post-receive common hook..."
      echo "    ($hook)"
      mv "$hook" "$hook.$BK_EXT"
      ln -s "$hooksrc" "$hook"
    fi
  else
    ln -s "$hooksrc" "$hook"
  fi

  # save server key in known_hosts
  if ! su -c 'ssh -q -oStrictHostKeyChecking=no git@localhost info >/dev/null' \
    -s /bin/sh gitlab;
  then
    echo "SSH server configured incorrectly - can't login as user 'git'" >&2
    exit 1
  fi

  # test if we can clone 
  if ! su -c 'git clone -qs git@localhost:gitolite-admin.git \
    /var/cache/gitlab/test-gitolite-admin' -s /bin/sh gitlab;
  then
    rm -rf /var/cache/gitlab/test-gitolite-admin
    echo "Gitolite configuration failed: can't clone gitolite-admin repo" >&2
    exit 1
  fi
  rm -rf /var/cache/gitlab/test-gitolite-admin
}


create_dirs() {
  # create log directory
  mkdir -p /var/log/gitlab
  chown gitlab:adm /var/log/gitlab
  chmod 0750 /var/log/gitlab

  # FIXME: cache, locks and temporary files should be splitted
  # create cache directory
  mkdir -p /var/cache/gitlab
  chown gitlab:gitlab /var/cache/gitlab
  chmod 0750 /var/cache/gitlab
}



case "$1" in
  configure)
    if [ -z "$2" ]; then
      add_users
      create_dirs
      gen_ssh_key
      setup_gitolite

      # setup database
      echo "Configuring gitlab..."
      exec_rake gitlab:app:setup

    else
      echo "Upgrading gitlab..."
      if dpkg --compare-versions "$2" le "3.0.1-1"; then
        sed -i \
          -e 's/^\$GL_GITCONFIG_KEYS = "";/$GL_GITCONFIG_KEYS = ".*";/' \
          /var/lib/git/.gitolite.rc
      fi

      # fix permissions
      if dpkg --compare-versions "$2" le "4.0.0-2"; then
        chown git:git -R /var/lib/git/repositories
        chmod u=rwX,g=rwX,o= -R /var/lib/git/repositories
        find /var/lib/git/repositories -type d -exec chmod ug+s '{}' ';'
      fi

      exec_rake db:migrate SCHEMA="/var/lib/gitlab/schema.rb"

      if dpkg --compare-versions "$2" le "4.0.0-2"; then
        exec_rake gitlab:enable_namespaces
        exec_rake gitlab:gitolite:update_repos
        exec_rake gitlab:satellites:create
      fi
    fi
    ;;
esac


# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
